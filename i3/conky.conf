### Conky configuration file
## Output is printed to the console -> i3bar

## No output to X <yes/no>
out_to_x no

## Create own window to draw <yes/no>
own_window no

## Print everything to console?
out_to_console yes

## Use double buffering (reduces flicker, not needed for console output)
double_buffer no

## Set to yes if you want Conky to be forked in the background
background no

## Update interval in seconds
update_interval 0.5

## This is the number of times Conky will update before quitting.
## Set to zero to run forever.
total_run_times 0

## Shortens units to a single character (kiB->k, GiB->G, etc.). Default is off.
short_units no

## How strict should if_up be when testing an interface for being up?
## The value is one of up, link or address, to check for the interface
## being solely up, being up and having link or being up, having link
## and an assigned IP address. 
if_up_strictness address

## Add spaces to keep things from moving about?  This only affects certain objects.
## use_spacer should have an argument of left, right, or none
use_spacer right

## Force UTF8? note that UTF8 support required XFT
override_utf8_locale no

## number of cpu samples to average
## set to 1 to disable averaging
cpu_avg_samples 2

pad_percents 2

## Stuff after 'TEXT' will be formatted on screen
TEXT

# JSON for i3bar
[
${if_match "${exec ~/bin/spotify/spotify-control getStatus}"!="Spotify is not running"} \
    {
        "full_text": " ${scroll 30 \
${exec ~/bin/spotify/spotify-control getArtist} - \
${exec ~/bin/spotify/spotify-control getTitle}} ",
        "color":
            ${if_match "${exec ~/bin/spotify/spotify-control getStatus}"=="Playing"}"\#00CC00"${else}
                ${if_match "${exec ~/bin/spotify/spotify-control getStatus}"=="Paused"}"\#FF8000"${else}
                    "\#CC0000"
                ${endif}
            ${endif} 
    },
${endif}
    {
        "full_text": " HDD:${fs_free /} "
    },
    {
        "full_text": " IP: ${if_up eth0}${addr eth0}${endif} "
    },
    {
        "full_text": " D: ${downspeed eth0}/s U: ${upspeed eth0}/s T: ${totaldown eth0}"
    },
    {
        "full_text": " CPU: ${cpu cpu0}% ",
        "color":
            ${if_match ${cpu cpu0}>90}"\#FF0000"${else}
                ${if_match ${cpu cpu0}<10}"\#00CC00"${else}
                    "\#ffffff"
                ${endif}
            ${endif} 
    },
    {
        "full_text": " RAM: ${memperc}% ",
        "color":
            ${if_match ${memperc}>90}"\#FF0000"${else}
                ${if_match ${memperc}<10}"\#00CC00"${else}
                    "\#ffffff"
                ${endif}
            ${endif} 
    },
    {
        "full_text": " Temp: ${exec sensors | grep 'temp2' | cut -c16-19 | sed '/^$/d' }Â°C "
    },
    {
        "full_text": " Up: ${uptime_short} "
    },
    {
        "full_text": " C ",
        "color":
            ${if_match "${exec xset q | grep 'Caps Lock' | sed 's/.*Caps Lock:[ ]*\([^ ]*\).*/\1/'}"=="on"}"\#00CC00"${else}
                "\#CC0000"
            ${endif}
    },
    {
        "full_text": " N ",
        "color":
            ${if_match "${exec xset q | grep 'Num Lock' | sed 's/.*Num Lock:[ ]*\([^ ]*\).*/\1/'}"=="on"}"\#00CC00"${else}
                "\#CC0000"
            ${endif}
    },
    {
        "full_text": " Vol: ${exec amixer sget 'Master' | grep 'Mono:' | cut -c22-24 | sed '/^$/d'} "
    },
    {
        "full_text": " ${time %a %d/%m/%y} ${time %H:%M:%S} ",
        "color": ${if_match ${time %u}>5}"\#00CC00"${else}"\#CC0000"${endif}
    }
],
